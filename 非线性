import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.io import loadmat
from sklearn import svm

raw_data = loadmat("data\\ex6data1.mat")

data = pd.DataFrame(raw_data['X'], columns=['X1', 'X2'])
data['y'] = raw_data['y']
data.head()

def plot_init_pic(data, fig, ax):
    positive = data.loc[data['y'] == 1]
    negative = data.loc[data['y'] == 0]

    ax.scatter(positive['X1'], positive['X2'], s=50, marker='+', label='Positive')
    ax.scatter(negative['X1'], negative['X2'], s=50, marker='o', label='Negative')

# fig, ax = plt.subplots(figsize=(12, 8))
# plot_init_pic(data, fig, ax)
# ax.set_xlabel('X1')
# ax.set_ylabel('X2')
# ax.legend()
# plt.show()

#数据集3
raw_data = loadmat('data\\ex6data3.mat')
data = pd.DataFrame(raw_data['X'], columns=['X1', 'X2'])
data['y'] = raw_data['y']

Xval = raw_data['Xval']
yval = raw_data['yval']

#数据可视化
fig, ax = plt.subplots(figsize=(12, 8))
plot_init_pic(data, fig, ax)
ax.set_xlabel('X1')
ax.set_ylabel('X2')
ax.legend()
plt.show()

#寻找最优解
C_values = [0.01, 0.03, 0.1, 0.3,0.5, 1, 3, 5,10, 30, 100]
gamma_values = [0.01, 0.03, 0.1, 0.3, 0.5,1, 3, 5,10, 30, 100]

best_score = 0
best_params = {'C':None, 'gamma':None}
for c in C_values:
    for gamma in gamma_values:
        svc = svm.SVC(C=c, gamma=gamma, probability=True)
        svc.fit(data[['X1', 'X2']], data['y']) # 用训练集训练
        score =svc.score(Xval, yval)  # 用验证集选优
        if score > best_score:
            best_score = score
            best_params['C'] = c
            best_params['gamma'] = gamma
print(f"最优c为：{best_params['C']},最优gamma为：{best_params['gamma']}")

svc3 = svm.SVC(C=best_params['C'], gamma=best_params['gamma'], probability=True)
svc3.fit(data[['X1', 'X2']], data['y'])
svc3.score(data[['X1', 'X2']], data['y'])
print(svc3.score(data[['X1', 'X2']], data['y']))


# 利用等高线绘制决策边界
def plot_decision_boundary(svc, x1min, x1max, x2min, x2max, ax):
    #     x1 = np.arange(x1min, x1max, 0.001)
    #     x2 = np.arange(x2min, x2max, 0.001)
    x1 = np.linspace(x1min, x1max, 1000)
    x2 = np.linspace(x2min, x2max, 1000)

    x1, x2 = np.meshgrid(x1, x2)
    y_pred = np.array([svc.predict(np.vstack((a, b)).T) for (a, b) in zip(x1, x2)])

    ax.contour(x1, x2, y_pred, colors='r', linewidths=5)

fig, ax = plt.subplots(figsize=(12, 8))

plot_init_pic(data, fig, ax)
plot_decision_boundary(svc3, -0.6, 0.3, -0.7, 0.6, ax)

ax.set_xlabel('X1')
ax.set_ylabel('X2')
ax.legend()
plt.show()
